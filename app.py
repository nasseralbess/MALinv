import streamlit as st
import os
from groq import Groq
import random
from langchain.chains import ConversationChain
from langchain.chains.conversation.memory import ConversationBufferWindowMemory
from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate

# Get Groq API key
groq_api_key = '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'

def survey_page():
    st.title("Investment Survey")

    # Investment amount question
    investment_amount = st.radio("What is the expected amount you want to spend on investment?", 
                                  ['$10-100', '$100-1000', '$1000-10000', '$10000+'])

    # Age question
    age = st.slider("What is your age?", 18, 100)

    # Investment goals question
    investment_goals = st.multiselect("What are your investment goals?", 
                                      ["Retirement", "Buying a house", "Generating passive income", "Education", "Other"])

    # Risk tolerance question
    risk_tolerance = st.radio("How comfortable are you with the possibility of losing money on your investments?", 
                              ["Not comfortable at all", "Slightly comfortable", "Moderately comfortable", "Very comfortable"])

    # Investment knowledge question
    investment_knowledge = st.select_slider("How would you rate your investment knowledge?", 
                                            options=["Novice", "Intermediate", "Advanced"])

    # Investment experience question
    investment_experience = st.radio("Do you have any previous experience with investing?", 
                                      ["Yes", "No"])

    return investment_amount, age, investment_goals, risk_tolerance, investment_knowledge, investment_experience


def chat_page(investment_amount, age, investment_goals, risk_tolerance, investment_knowledge, investment_experience):
    # Display the Groq logo
    st.image('bread2.png',width=700, use_column_width=True)


    st.title("Chat with Mal!")
    st.write("Hello! I'm your friendly investment assistant. Ask me anything about investing and I'll do my best to help you out.")

    # Add customization options to the sidebar
    model ='mixtral-8x7b-32768'
    conversational_memory_length = 5

    memory = ConversationBufferWindowMemory(k=conversational_memory_length)
    inp = st.text_input("Ask a question:")
    user_question = f'''You are an amazing stock market expert here to help me with getting started with investing from zero experience\
    I have a few questions to ask you. Some background information to help maximize advice: my age is {age}, the amount I'd like to invest\
    is {investment_amount}, my promary goal for investment: (other for not sure) {investment_goals}, I am a {investment_knowledge} investor\
    Do I have any experience? {investment_experience}. I am also {risk_tolerance} with taking risks.\
    your main goal is to talk to me about the stock market specifically, talk about things like investment best practices, safe companies\
    to start investing in, some websites that I can use to get started, and some general tips for beginners.''' + inp

    # session state variable
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    else:
        for message in st.session_state.chat_history:
            memory.save_context({'input': message['human']}, {'output': message['AI']})

    # Initialize Groq Langchain chat object and conversation
    groq_chat = ChatGroq(groq_api_key=groq_api_key, model_name=model)
    conversation = ConversationChain(llm=groq_chat, memory=memory)

    # If the user has asked a question,
    if inp:
        # The chatbot's answer is generated by sending the full prompt to the Groq API.
        response = conversation(user_question)
        message = {'human': user_question, 'AI': response['response']}
        st.session_state.chat_history.append(message)
        st.write("Chatbot:", response['response'])

def main():
    # Initialize the reload count
    if 'survey_completed' not in st.session_state:
        st.session_state.survey_completed = False
    if 'reload_count' not in st.session_state:
        st.session_state.reload_count = 0
    print(f"Survey: {st.session_state.survey_completed}, Reload: {st.session_state.reload_count}")
    # Increment the reload count
    st.session_state.reload_count += 1
    investment_amount, age, investment_goals, risk_tolerance, investment_knowledge, investment_experience = None, None, None, None, None, None

    if st.session_state.reload_count == 1 or not st.session_state.survey_completed:
        investment_amount, age, investment_goals, risk_tolerance, investment_knowledge, investment_experience = survey_page()
        st.session_state.survey_completed = False
    # Next button to navigate to the chat page
    if st.session_state.survey_completed or st.button("Next"):
        st.session_state.survey_completed = True
        chat_page(investment_amount, age, investment_goals, risk_tolerance, investment_knowledge, investment_experience)


if __name__ == "__main__":
    main()
